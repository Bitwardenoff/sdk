// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do one of these:
//
//    using Bitwarden.Sdk;
//
//    var clientSettings = ClientSettings.FromJson(jsonString);
//    var command = Command.FromJson(jsonString);
//    var docRef = DocRef.FromJson(jsonString);
//    var responseForApiKeyLoginResponse = ResponseForApiKeyLoginResponse.FromJson(jsonString);
//    var responseForFingerprintResponse = ResponseForFingerprintResponse.FromJson(jsonString);
//    var responseForPasswordLoginResponse = ResponseForPasswordLoginResponse.FromJson(jsonString);
//    var responseForProjectResponse = ResponseForProjectResponse.FromJson(jsonString);
//    var responseForProjectsDeleteResponse = ResponseForProjectsDeleteResponse.FromJson(jsonString);
//    var responseForProjectsResponse = ResponseForProjectsResponse.FromJson(jsonString);
//    var responseForSecretIdentifiersResponse = ResponseForSecretIdentifiersResponse.FromJson(jsonString);
//    var responseForSecretResponse = ResponseForSecretResponse.FromJson(jsonString);
//    var responseForSecretsDeleteResponse = ResponseForSecretsDeleteResponse.FromJson(jsonString);
//    var responseForSecretsResponse = ResponseForSecretsResponse.FromJson(jsonString);
//    var responseForSyncResponse = ResponseForSyncResponse.FromJson(jsonString);
//    var responseForUserApiKeyResponse = ResponseForUserApiKeyResponse.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace Bitwarden.Sdk
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    /// <summary>
    /// Basic client behavior settings. These settings specify the various targets and behavior
    /// of the Bitwarden Client. They are optional and uneditable once the client is
    /// initialized.
    ///
    /// Defaults to
    ///
    /// ``` # use bitwarden::client::client_settings::{ClientSettings, DeviceType}; # use
    /// assert_matches::assert_matches; let settings = ClientSettings { identity_url:
    /// "https://identity.bitwarden.com".to_string(), api_url:
    /// "https://api.bitwarden.com".to_string(), user_agent: "Bitwarden Rust-SDK".to_string(),
    /// device_type: DeviceType::SDK, }; let default = ClientSettings::default();
    /// assert_matches!(settings, default); ```
    ///
    /// Targets `localhost:8080` for debug builds.
    /// </summary>
    public partial class ClientSettings
    {
        /// <summary>
        /// The api url of the targeted Bitwarden instance. Defaults to `https://api.bitwarden.com`
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("apiUrl")]
        public string ApiUrl { get; set; }

        /// <summary>
        /// Device type to send to Bitwarden. Defaults to SDK
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("deviceType")]
        public DeviceType? DeviceType { get; set; }

        /// <summary>
        /// The identity url of the targeted Bitwarden instance. Defaults to
        /// `https://identity.bitwarden.com`
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("identityUrl")]
        public string IdentityUrl { get; set; }

        /// <summary>
        /// The user_agent to sent to Bitwarden. Defaults to `Bitwarden Rust-SDK`
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("userAgent")]
        public string UserAgent { get; set; }
    }

    /// <summary>
    /// Login with username and password
    ///
    /// This command is for initiating an authentication handshake with Bitwarden. Authorization
    /// may fail due to requiring 2fa or captcha challenge completion despite accurate
    /// credentials.
    ///
    /// This command is not capable of handling authentication requiring 2fa or captcha.
    ///
    /// Returns: [PasswordLoginResponse](bitwarden::auth::login::PasswordLoginResponse)
    ///
    /// Login with API Key
    ///
    /// This command is for initiating an authentication handshake with Bitwarden.
    ///
    /// Returns: [ApiKeyLoginResponse](bitwarden::auth::login::ApiKeyLoginResponse)
    ///
    /// Login with Secrets Manager Access Token
    ///
    /// This command is for initiating an authentication handshake with Bitwarden.
    ///
    /// Returns: [ApiKeyLoginResponse](bitwarden::auth::login::ApiKeyLoginResponse)
    ///
    /// > Requires Authentication Get the API key of the currently authenticated user
    ///
    /// Returns: [UserApiKeyResponse](bitwarden::platform::UserApiKeyResponse)
    ///
    /// Get the user's passphrase
    ///
    /// Returns: String
    ///
    /// > Requires Authentication Retrieve all user data, ciphers and organizations the user is a
    /// part of
    ///
    /// Returns: [SyncResponse](bitwarden::platform::SyncResponse)
    /// </summary>
    public partial class Command
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("passwordLogin")]
        public PasswordLoginRequest PasswordLogin { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("apiKeyLogin")]
        public ApiKeyLoginRequest ApiKeyLogin { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("accessTokenLogin")]
        public AccessTokenLoginRequest AccessTokenLogin { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("getUserApiKey")]
        public SecretVerificationRequest GetUserApiKey { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("fingerprint")]
        public FingerprintRequest Fingerprint { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sync")]
        public SyncRequest Sync { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("secrets")]
        public SecretsCommand Secrets { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("projects")]
        public ProjectsCommand Projects { get; set; }
    }

    /// <summary>
    /// Login to Bitwarden with access token
    /// </summary>
    public partial class AccessTokenLoginRequest
    {
        /// <summary>
        /// Bitwarden service API access token
        /// </summary>
        [JsonPropertyName("accessToken")]
        public string AccessToken { get; set; }
    }

    /// <summary>
    /// Login to Bitwarden with Api Key
    /// </summary>
    public partial class ApiKeyLoginRequest
    {
        /// <summary>
        /// Bitwarden account client_id
        /// </summary>
        [JsonPropertyName("clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Bitwarden account client_secret
        /// </summary>
        [JsonPropertyName("clientSecret")]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Bitwarden account master password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }
    }

    public partial class FingerprintRequest
    {
        /// <summary>
        /// The input material, used in the fingerprint generation process.
        /// </summary>
        [JsonPropertyName("fingerprintMaterial")]
        public string FingerprintMaterial { get; set; }

        /// <summary>
        /// The user's public key encoded with base64.
        /// </summary>
        [JsonPropertyName("publicKey")]
        public string PublicKey { get; set; }
    }

    public partial class SecretVerificationRequest
    {
        /// <summary>
        /// The user's master password to use for user verification. If supplied, this will be used
        /// for verification purposes.
        /// </summary>
        [JsonPropertyName("masterPassword")]
        public string MasterPassword { get; set; }

        /// <summary>
        /// Alternate user verification method through OTP. This is provided for users who have no
        /// master password due to use of Customer Managed Encryption. Must be present and valid if
        /// master_password is absent.
        /// </summary>
        [JsonPropertyName("otp")]
        public string Otp { get; set; }
    }

    /// <summary>
    /// Login to Bitwarden with Username and Password
    /// </summary>
    public partial class PasswordLoginRequest
    {
        /// <summary>
        /// Bitwarden account email address
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Bitwarden account master password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        [JsonPropertyName("twoFactor")]
        public TwoFactorRequest TwoFactor { get; set; }
    }

    public partial class TwoFactorRequest
    {
        /// <summary>
        /// Two-factor provider
        /// </summary>
        [JsonPropertyName("provider")]
        public TwoFactorProvider Provider { get; set; }

        /// <summary>
        /// Two-factor remember
        /// </summary>
        [JsonPropertyName("remember")]
        public bool Remember { get; set; }

        /// <summary>
        /// Two-factor Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get; set; }
    }

    /// <summary>
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Retrieve a project by the provided identifier
    ///
    /// Returns: [ProjectResponse](bitwarden::secrets_manager::projects::ProjectResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Creates a new project in the provided organization using the given data
    ///
    /// Returns: [ProjectResponse](bitwarden::secrets_manager::projects::ProjectResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Lists all projects of the given organization
    ///
    /// Returns: [ProjectsResponse](bitwarden::secrets_manager::projects::ProjectsResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Updates an existing project with the provided ID using the given data
    ///
    /// Returns: [ProjectResponse](bitwarden::secrets_manager::projects::ProjectResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Deletes all the projects whose IDs match the provided ones
    ///
    /// Returns:
    /// [ProjectsDeleteResponse](bitwarden::secrets_manager::projects::ProjectsDeleteResponse)
    /// </summary>
    public partial class ProjectsCommand
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("get")]
        public ProjectGetRequest Get { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("create")]
        public ProjectCreateRequest Create { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("list")]
        public ProjectsListRequest List { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("update")]
        public ProjectPutRequest Update { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("delete")]
        public ProjectsDeleteRequest Delete { get; set; }
    }

    public partial class ProjectCreateRequest
    {
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Organization where the project will be created
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }
    }

    public partial class ProjectsDeleteRequest
    {
        /// <summary>
        /// IDs of the projects to delete
        /// </summary>
        [JsonPropertyName("ids")]
        public Guid[] Ids { get; set; }
    }

    public partial class ProjectGetRequest
    {
        /// <summary>
        /// ID of the project to retrieve
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    public partial class ProjectsListRequest
    {
        /// <summary>
        /// Organization to retrieve all the projects from
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }
    }

    public partial class ProjectPutRequest
    {
        /// <summary>
        /// ID of the project to modify
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Organization ID of the project to modify
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }
    }

    /// <summary>
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Retrieve a secret by the provided identifier
    ///
    /// Returns: [SecretResponse](bitwarden::secrets_manager::secrets::SecretResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Retrieve secrets by the provided identifiers
    ///
    /// Returns: [SecretsResponse](bitwarden::secrets_manager::secrets::SecretsResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Creates a new secret in the provided organization using the given data
    ///
    /// Returns: [SecretResponse](bitwarden::secrets_manager::secrets::SecretResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Lists all secret identifiers of the given organization, to then retrieve each
    /// secret, use `CreateSecret`
    ///
    /// Returns:
    /// [SecretIdentifiersResponse](bitwarden::secrets_manager::secrets::SecretIdentifiersResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Updates an existing secret with the provided ID using the given data
    ///
    /// Returns: [SecretResponse](bitwarden::secrets_manager::secrets::SecretResponse)
    ///
    /// > Requires Authentication > Requires using an Access Token for login or calling Sync at
    /// least once Deletes all the secrets whose IDs match the provided ones
    ///
    /// Returns:
    /// [SecretsDeleteResponse](bitwarden::secrets_manager::secrets::SecretsDeleteResponse)
    /// </summary>
    public partial class SecretsCommand
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("get")]
        public SecretGetRequest Get { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("getByIds")]
        public SecretsGetRequest GetByIds { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("create")]
        public SecretCreateRequest Create { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("list")]
        public SecretIdentifiersRequest List { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("update")]
        public SecretPutRequest Update { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("delete")]
        public SecretsDeleteRequest Delete { get; set; }
    }

    public partial class SecretCreateRequest
    {
        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("note")]
        public string Note { get; set; }

        /// <summary>
        /// Organization where the secret will be created
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        /// <summary>
        /// IDs of the projects that this secret will belong to
        /// </summary>
        [JsonPropertyName("projectIds")]
        public Guid[] ProjectIds { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class SecretsDeleteRequest
    {
        /// <summary>
        /// IDs of the secrets to delete
        /// </summary>
        [JsonPropertyName("ids")]
        public Guid[] Ids { get; set; }
    }

    public partial class SecretGetRequest
    {
        /// <summary>
        /// ID of the secret to retrieve
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    public partial class SecretsGetRequest
    {
        /// <summary>
        /// IDs of the secrets to retrieve
        /// </summary>
        [JsonPropertyName("ids")]
        public Guid[] Ids { get; set; }
    }

    public partial class SecretIdentifiersRequest
    {
        /// <summary>
        /// Organization to retrieve all the secrets from
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }
    }

    public partial class SecretPutRequest
    {
        /// <summary>
        /// ID of the secret to modify
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("note")]
        public string Note { get; set; }

        /// <summary>
        /// Organization ID of the secret to modify
        /// </summary>
        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("projectIds")]
        public Guid[] ProjectIds { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class SyncRequest
    {
        /// <summary>
        /// Exclude the subdomains from the response, defaults to false
        /// </summary>
        [JsonPropertyName("excludeSubdomains")]
        public bool? ExcludeSubdomains { get; set; }
    }

    public partial class DocRef
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Cipher")]
        public Cipher Cipher { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("CipherView")]
        public CipherView CipherView { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Collection")]
        public Collection Collection { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Folder")]
        public Folder Folder { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("FolderView")]
        public FolderView FolderView { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Send")]
        public Send Send { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("SendView")]
        public SendView SendView { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("SendListView")]
        public SendListView SendListView { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("InitCryptoRequest")]
        public InitCryptoRequest InitCryptoRequest { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("PasswordGeneratorRequest")]
        public PasswordGeneratorRequest PasswordGeneratorRequest { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("PassphraseGeneratorRequest")]
        public PassphraseGeneratorRequest PassphraseGeneratorRequest { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("ExportFormat")]
        public ExportFormat? ExportFormat { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("MasterPasswordPolicyOptions")]
        public MasterPasswordPolicyOptions MasterPasswordPolicyOptions { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("Kdf")]
        public Kdf Kdf { get; set; }
    }

    public partial class Cipher
    {
        [JsonPropertyName("attachments")]
        public Attachment[] Attachments { get; set; }

        [JsonPropertyName("card")]
        public Card Card { get; set; }

        [JsonPropertyName("collectionIds")]
        public Guid[] CollectionIds { get; set; }

        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("deletedDate")]
        public DateTimeOffset? DeletedDate { get; set; }

        [JsonPropertyName("edit")]
        public bool Edit { get; set; }

        [JsonPropertyName("favorite")]
        public bool Favorite { get; set; }

        [JsonPropertyName("fields")]
        public Field[] Fields { get; set; }

        [JsonPropertyName("folderId")]
        public Guid? FolderId { get; set; }

        [JsonPropertyName("id")]
        public Guid? Id { get; set; }

        [JsonPropertyName("identity")]
        public Identity Identity { get; set; }

        [JsonPropertyName("localData")]
        public LocalData LocalData { get; set; }

        [JsonPropertyName("login")]
        public Login Login { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("notes")]
        public string Notes { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get; set; }

        [JsonPropertyName("organizationUseTotp")]
        public bool OrganizationUseTotp { get; set; }

        [JsonPropertyName("passwordHistory")]
        public PasswordHistory[] PasswordHistory { get; set; }

        [JsonPropertyName("reprompt")]
        public CipherRepromptType Reprompt { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("secureNote")]
        public SecureNote SecureNote { get; set; }

        [JsonPropertyName("type")]
        public CipherType Type { get; set; }

        [JsonPropertyName("viewPassword")]
        public bool ViewPassword { get; set; }
    }

    public partial class Attachment
    {
        [JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("size")]
        public string Size { get; set; }

        /// <summary>
        /// Readable size, ex: "4.2 KB" or "1.43 GB"
        /// </summary>
        [JsonPropertyName("sizeName")]
        public string SizeName { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }
    }

    public partial class Card
    {
        [JsonPropertyName("brand")]
        public string Brand { get; set; }

        [JsonPropertyName("cardholderName")]
        public string CardholderName { get; set; }

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("expMonth")]
        public string ExpMonth { get; set; }

        [JsonPropertyName("expYear")]
        public string ExpYear { get; set; }

        [JsonPropertyName("number")]
        public string Number { get; set; }
    }

    public partial class Field
    {
        [JsonPropertyName("linkedId")]
        public LinkedIdType? LinkedId { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public FieldType Type { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class Identity
    {
        [JsonPropertyName("address1")]
        public string Address1 { get; set; }

        [JsonPropertyName("address2")]
        public string Address2 { get; set; }

        [JsonPropertyName("address3")]
        public string Address3 { get; set; }

        [JsonPropertyName("city")]
        public string City { get; set; }

        [JsonPropertyName("company")]
        public string Company { get; set; }

        [JsonPropertyName("country")]
        public string Country { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [JsonPropertyName("licenseNumber")]
        public string LicenseNumber { get; set; }

        [JsonPropertyName("middleName")]
        public string MiddleName { get; set; }

        [JsonPropertyName("passportNumber")]
        public string PassportNumber { get; set; }

        [JsonPropertyName("phone")]
        public string Phone { get; set; }

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        [JsonPropertyName("ssn")]
        public string Ssn { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }
    }

    public partial class LocalData
    {
        [JsonPropertyName("lastLaunched")]
        public long? LastLaunched { get; set; }

        [JsonPropertyName("lastUsedDate")]
        public long? LastUsedDate { get; set; }
    }

    public partial class Login
    {
        [JsonPropertyName("autofillOnPageLoad")]
        public bool? AutofillOnPageLoad { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

        [JsonPropertyName("passwordRevisionDate")]
        public DateTimeOffset? PasswordRevisionDate { get; set; }

        [JsonPropertyName("totp")]
        public string Totp { get; set; }

        [JsonPropertyName("uris")]
        public LoginUri[] Uris { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }
    }

    public partial class LoginUri
    {
        [JsonPropertyName("match")]
        public UriMatchType? Match { get; set; }

        [JsonPropertyName("uri")]
        public string Uri { get; set; }
    }

    public partial class PasswordHistory
    {
        [JsonPropertyName("lastUsedDate")]
        public DateTimeOffset LastUsedDate { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }
    }

    public partial class SecureNote
    {
        [JsonPropertyName("type")]
        public SecureNoteType Type { get; set; }
    }

    public partial class CipherView
    {
        [JsonPropertyName("attachments")]
        public AttachmentView[] Attachments { get; set; }

        [JsonPropertyName("card")]
        public CardView Card { get; set; }

        [JsonPropertyName("collectionIds")]
        public Guid[] CollectionIds { get; set; }

        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("deletedDate")]
        public DateTimeOffset? DeletedDate { get; set; }

        [JsonPropertyName("edit")]
        public bool Edit { get; set; }

        [JsonPropertyName("favorite")]
        public bool Favorite { get; set; }

        [JsonPropertyName("fields")]
        public FieldView[] Fields { get; set; }

        [JsonPropertyName("folderId")]
        public Guid? FolderId { get; set; }

        [JsonPropertyName("id")]
        public Guid? Id { get; set; }

        [JsonPropertyName("identity")]
        public IdentityView Identity { get; set; }

        [JsonPropertyName("localData")]
        public LocalDataView LocalData { get; set; }

        [JsonPropertyName("login")]
        public LoginView Login { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("notes")]
        public string Notes { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid? OrganizationId { get; set; }

        [JsonPropertyName("organizationUseTotp")]
        public bool OrganizationUseTotp { get; set; }

        [JsonPropertyName("passwordHistory")]
        public PasswordHistoryView[] PasswordHistory { get; set; }

        [JsonPropertyName("reprompt")]
        public CipherRepromptType Reprompt { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("secureNote")]
        public SecureNoteView SecureNote { get; set; }

        [JsonPropertyName("type")]
        public CipherType Type { get; set; }

        [JsonPropertyName("viewPassword")]
        public bool ViewPassword { get; set; }
    }

    public partial class AttachmentView
    {
        [JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("size")]
        public string Size { get; set; }

        [JsonPropertyName("sizeName")]
        public string SizeName { get; set; }

        [JsonPropertyName("url")]
        public string Url { get; set; }
    }

    public partial class CardView
    {
        [JsonPropertyName("brand")]
        public string Brand { get; set; }

        [JsonPropertyName("cardholderName")]
        public string CardholderName { get; set; }

        [JsonPropertyName("code")]
        public string Code { get; set; }

        [JsonPropertyName("expMonth")]
        public string ExpMonth { get; set; }

        [JsonPropertyName("expYear")]
        public string ExpYear { get; set; }

        [JsonPropertyName("number")]
        public string Number { get; set; }
    }

    public partial class FieldView
    {
        [JsonPropertyName("linkedId")]
        public LinkedIdType? LinkedId { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("type")]
        public FieldType Type { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class IdentityView
    {
        [JsonPropertyName("address1")]
        public string Address1 { get; set; }

        [JsonPropertyName("address2")]
        public string Address2 { get; set; }

        [JsonPropertyName("address3")]
        public string Address3 { get; set; }

        [JsonPropertyName("city")]
        public string City { get; set; }

        [JsonPropertyName("company")]
        public string Company { get; set; }

        [JsonPropertyName("country")]
        public string Country { get; set; }

        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("firstName")]
        public string FirstName { get; set; }

        [JsonPropertyName("lastName")]
        public string LastName { get; set; }

        [JsonPropertyName("licenseNumber")]
        public string LicenseNumber { get; set; }

        [JsonPropertyName("middleName")]
        public string MiddleName { get; set; }

        [JsonPropertyName("passportNumber")]
        public string PassportNumber { get; set; }

        [JsonPropertyName("phone")]
        public string Phone { get; set; }

        [JsonPropertyName("postalCode")]
        public string PostalCode { get; set; }

        [JsonPropertyName("ssn")]
        public string Ssn { get; set; }

        [JsonPropertyName("state")]
        public string State { get; set; }

        [JsonPropertyName("title")]
        public string Title { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }
    }

    public partial class LocalDataView
    {
        [JsonPropertyName("lastLaunched")]
        public long? LastLaunched { get; set; }

        [JsonPropertyName("lastUsedDate")]
        public long? LastUsedDate { get; set; }
    }

    public partial class LoginView
    {
        [JsonPropertyName("autofillOnPageLoad")]
        public bool? AutofillOnPageLoad { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

        [JsonPropertyName("passwordRevisionDate")]
        public DateTimeOffset? PasswordRevisionDate { get; set; }

        [JsonPropertyName("totp")]
        public string Totp { get; set; }

        [JsonPropertyName("uris")]
        public LoginUriView[] Uris { get; set; }

        [JsonPropertyName("username")]
        public string Username { get; set; }
    }

    public partial class LoginUriView
    {
        [JsonPropertyName("match")]
        public UriMatchType? Match { get; set; }

        [JsonPropertyName("uri")]
        public string Uri { get; set; }
    }

    public partial class PasswordHistoryView
    {
        [JsonPropertyName("lastUsedDate")]
        public DateTimeOffset LastUsedDate { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }
    }

    public partial class SecureNoteView
    {
        [JsonPropertyName("type")]
        public SecureNoteType Type { get; set; }
    }

    public partial class Collection
    {
        [JsonPropertyName("externalId")]
        public string ExternalId { get; set; }

        [JsonPropertyName("hidePasswords")]
        public bool HidePasswords { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("readOnly")]
        public bool ReadOnly { get; set; }
    }

    public partial class ExportFormatClass
    {
        [JsonPropertyName("EncryptedJson")]
        public EncryptedJson EncryptedJson { get; set; }
    }

    public partial class EncryptedJson
    {
        [JsonPropertyName("password")]
        public string Password { get; set; }
    }

    public partial class Folder
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }
    }

    public partial class FolderView
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }
    }

    public partial class InitCryptoRequest
    {
        /// <summary>
        /// The user's email address
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// The user's KDF parameters, as received from the prelogin request
        /// </summary>
        [JsonPropertyName("kdfParams")]
        public Kdf KdfParams { get; set; }

        /// <summary>
        /// The encryption keys for all the organizations the user is a part of
        /// </summary>
        [JsonPropertyName("organizationKeys")]
        public Dictionary<string, string> OrganizationKeys { get; set; }

        /// <summary>
        /// The user's master password
        /// </summary>
        [JsonPropertyName("password")]
        public string Password { get; set; }

        /// <summary>
        /// The user's encryptred private key
        /// </summary>
        [JsonPropertyName("privateKey")]
        public string PrivateKey { get; set; }

        /// <summary>
        /// The user's encrypted symmetric crypto key
        /// </summary>
        [JsonPropertyName("userKey")]
        public string UserKey { get; set; }
    }

    /// <summary>
    /// The user's KDF parameters, as received from the prelogin request
    /// </summary>
    public partial class Kdf
    {
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("pBKDF2")]
        public PBkdf2 PBkdf2 { get; set; }

        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("argon2id")]
        public Argon2Id Argon2Id { get; set; }
    }

    public partial class Argon2Id
    {
        [JsonPropertyName("iterations")]
        public long Iterations { get; set; }

        [JsonPropertyName("memory")]
        public long Memory { get; set; }

        [JsonPropertyName("parallelism")]
        public long Parallelism { get; set; }
    }

    public partial class PBkdf2
    {
        [JsonPropertyName("iterations")]
        public long Iterations { get; set; }
    }

    public partial class MasterPasswordPolicyOptions
    {
        /// <summary>
        /// Flag to indicate if the policy should be enforced on login. If true, and the user's
        /// password does not meet the policy requirements, the user will be forced to update their
        /// password.
        /// </summary>
        [JsonPropertyName("enforce_on_login")]
        public bool EnforceOnLogin { get; set; }

        [JsonPropertyName("min_complexity")]
        public long MinComplexity { get; set; }

        [JsonPropertyName("min_length")]
        public long MinLength { get; set; }

        [JsonPropertyName("require_lower")]
        public bool RequireLower { get; set; }

        [JsonPropertyName("require_numbers")]
        public bool RequireNumbers { get; set; }

        [JsonPropertyName("require_special")]
        public bool RequireSpecial { get; set; }

        [JsonPropertyName("require_upper")]
        public bool RequireUpper { get; set; }
    }

    /// <summary>
    /// Passphrase generator request.
    ///
    /// The default separator is `-` and default number of words is 3.
    /// </summary>
    public partial class PassphraseGeneratorRequest
    {
        [JsonPropertyName("capitalize")]
        public bool? Capitalize { get; set; }

        [JsonPropertyName("includeNumber")]
        public bool? IncludeNumber { get; set; }

        [JsonPropertyName("numWords")]
        public long? NumWords { get; set; }

        [JsonPropertyName("wordSeparator")]
        public string WordSeparator { get; set; }
    }

    /// <summary>
    /// Password generator request. If all options are false, the default is to generate a
    /// password with: - lowercase - uppercase - numbers
    ///
    /// The default length is 16.
    /// </summary>
    public partial class PasswordGeneratorRequest
    {
        [JsonPropertyName("avoidAmbiguous")]
        public bool? AvoidAmbiguous { get; set; }

        [JsonPropertyName("length")]
        public long? Length { get; set; }

        [JsonPropertyName("lowercase")]
        public bool Lowercase { get; set; }

        [JsonPropertyName("minLowercase")]
        public bool? MinLowercase { get; set; }

        [JsonPropertyName("minNumber")]
        public bool? MinNumber { get; set; }

        [JsonPropertyName("minSpecial")]
        public bool? MinSpecial { get; set; }

        [JsonPropertyName("minUppercase")]
        public bool? MinUppercase { get; set; }

        [JsonPropertyName("numbers")]
        public bool Numbers { get; set; }

        [JsonPropertyName("special")]
        public bool Special { get; set; }

        [JsonPropertyName("uppercase")]
        public bool Uppercase { get; set; }
    }

    public partial class Send
    {
        [JsonPropertyName("accessCount")]
        public long AccessCount { get; set; }

        [JsonPropertyName("accessId")]
        public string AccessId { get; set; }

        [JsonPropertyName("deletionDate")]
        public DateTimeOffset DeletionDate { get; set; }

        [JsonPropertyName("disabled")]
        public bool Disabled { get; set; }

        [JsonPropertyName("expirationDate")]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonPropertyName("file")]
        public SendFile File { get; set; }

        [JsonPropertyName("hideEmail")]
        public bool HideEmail { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("maxAccessCount")]
        public long? MaxAccessCount { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("notes")]
        public string Notes { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("text")]
        public SendText Text { get; set; }

        [JsonPropertyName("type")]
        public SendType Type { get; set; }
    }

    public partial class SendFile
    {
        [JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("size")]
        public string Size { get; set; }

        /// <summary>
        /// Readable size, ex: "4.2 KB" or "1.43 GB"
        /// </summary>
        [JsonPropertyName("sizeName")]
        public string SizeName { get; set; }
    }

    public partial class SendText
    {
        [JsonPropertyName("hidden")]
        public bool Hidden { get; set; }

        [JsonPropertyName("text")]
        public string Text { get; set; }
    }

    public partial class SendListView
    {
        [JsonPropertyName("accessId")]
        public string AccessId { get; set; }

        [JsonPropertyName("deletionDate")]
        public DateTimeOffset DeletionDate { get; set; }

        [JsonPropertyName("disabled")]
        public bool Disabled { get; set; }

        [JsonPropertyName("expirationDate")]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("type")]
        public SendType Type { get; set; }
    }

    public partial class SendView
    {
        [JsonPropertyName("accessCount")]
        public long AccessCount { get; set; }

        [JsonPropertyName("accessId")]
        public string AccessId { get; set; }

        [JsonPropertyName("deletionDate")]
        public DateTimeOffset DeletionDate { get; set; }

        [JsonPropertyName("disabled")]
        public bool Disabled { get; set; }

        [JsonPropertyName("expirationDate")]
        public DateTimeOffset? ExpirationDate { get; set; }

        [JsonPropertyName("file")]
        public SendFileView File { get; set; }

        [JsonPropertyName("hideEmail")]
        public bool HideEmail { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("maxAccessCount")]
        public long? MaxAccessCount { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("notes")]
        public string Notes { get; set; }

        [JsonPropertyName("password")]
        public string Password { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("text")]
        public SendTextView Text { get; set; }

        [JsonPropertyName("type")]
        public SendType Type { get; set; }
    }

    public partial class SendFileView
    {
        [JsonPropertyName("fileName")]
        public string FileName { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }

        [JsonPropertyName("size")]
        public string Size { get; set; }

        /// <summary>
        /// Readable size, ex: "4.2 KB" or "1.43 GB"
        /// </summary>
        [JsonPropertyName("sizeName")]
        public string SizeName { get; set; }
    }

    public partial class SendTextView
    {
        [JsonPropertyName("hidden")]
        public bool Hidden { get; set; }

        [JsonPropertyName("text")]
        public string Text { get; set; }
    }

    public partial class ResponseForApiKeyLoginResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public ApiKeyLoginResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class ApiKeyLoginResponse
    {
        [JsonPropertyName("authenticated")]
        public bool Authenticated { get; set; }

        /// <summary>
        /// Whether or not the user is required to update their master password
        /// </summary>
        [JsonPropertyName("forcePasswordReset")]
        public bool ForcePasswordReset { get; set; }

        /// <summary>
        /// TODO: What does this do?
        /// </summary>
        [JsonPropertyName("resetMasterPassword")]
        public bool ResetMasterPassword { get; set; }

        [JsonPropertyName("twoFactor")]
        public ApiKeyLoginResponseTwoFactorProviders TwoFactor { get; set; }
    }

    public partial class ApiKeyLoginResponseTwoFactorProviders
    {
        [JsonPropertyName("authenticator")]
        public PurpleAuthenticator Authenticator { get; set; }

        /// <summary>
        /// Duo-backed 2fa
        /// </summary>
        [JsonPropertyName("duo")]
        public PurpleDuo Duo { get; set; }

        /// <summary>
        /// Email 2fa
        /// </summary>
        [JsonPropertyName("email")]
        public PurpleEmail Email { get; set; }

        /// <summary>
        /// Duo-backed 2fa operated by an organization the user is a member of
        /// </summary>
        [JsonPropertyName("organizationDuo")]
        public PurpleDuo OrganizationDuo { get; set; }

        /// <summary>
        /// Presence indicates the user has stored this device as bypassing 2fa
        /// </summary>
        [JsonPropertyName("remember")]
        public PurpleRemember Remember { get; set; }

        /// <summary>
        /// WebAuthn-backed 2fa
        /// </summary>
        [JsonPropertyName("webAuthn")]
        public PurpleWebAuthn WebAuthn { get; set; }

        /// <summary>
        /// Yubikey-backed 2fa
        /// </summary>
        [JsonPropertyName("yubiKey")]
        public PurpleYubiKey YubiKey { get; set; }
    }

    public partial class PurpleAuthenticator
    {
    }

    public partial class PurpleDuo
    {
        [JsonPropertyName("host")]
        public string Host { get; set; }

        [JsonPropertyName("signature")]
        public string Signature { get; set; }
    }

    public partial class PurpleEmail
    {
        /// <summary>
        /// The email to request a 2fa TOTP for
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }
    }

    public partial class PurpleRemember
    {
    }

    public partial class PurpleWebAuthn
    {
    }

    public partial class PurpleYubiKey
    {
        /// <summary>
        /// Whether the stored yubikey supports near field communication
        /// </summary>
        [JsonPropertyName("nfc")]
        public bool Nfc { get; set; }
    }

    public partial class ResponseForFingerprintResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public FingerprintResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class FingerprintResponse
    {
        [JsonPropertyName("fingerprint")]
        public string Fingerprint { get; set; }
    }

    public partial class ResponseForPasswordLoginResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public PasswordLoginResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class PasswordLoginResponse
    {
        [JsonPropertyName("authenticated")]
        public bool Authenticated { get; set; }

        /// <summary>
        /// The information required to present the user with a captcha challenge. Only present when
        /// authentication fails due to requiring validation of a captcha challenge.
        /// </summary>
        [JsonPropertyName("captcha")]
        public CaptchaResponse Captcha { get; set; }

        /// <summary>
        /// Whether or not the user is required to update their master password
        /// </summary>
        [JsonPropertyName("forcePasswordReset")]
        public bool ForcePasswordReset { get; set; }

        /// <summary>
        /// TODO: What does this do?
        /// </summary>
        [JsonPropertyName("resetMasterPassword")]
        public bool ResetMasterPassword { get; set; }

        /// <summary>
        /// The available two factor authentication options. Present only when authentication fails
        /// due to requiring a second authentication factor.
        /// </summary>
        [JsonPropertyName("twoFactor")]
        public PasswordLoginResponseTwoFactorProviders TwoFactor { get; set; }
    }

    public partial class CaptchaResponse
    {
        /// <summary>
        /// hcaptcha site key
        /// </summary>
        [JsonPropertyName("siteKey")]
        public string SiteKey { get; set; }
    }

    public partial class PasswordLoginResponseTwoFactorProviders
    {
        [JsonPropertyName("authenticator")]
        public FluffyAuthenticator Authenticator { get; set; }

        /// <summary>
        /// Duo-backed 2fa
        /// </summary>
        [JsonPropertyName("duo")]
        public FluffyDuo Duo { get; set; }

        /// <summary>
        /// Email 2fa
        /// </summary>
        [JsonPropertyName("email")]
        public FluffyEmail Email { get; set; }

        /// <summary>
        /// Duo-backed 2fa operated by an organization the user is a member of
        /// </summary>
        [JsonPropertyName("organizationDuo")]
        public FluffyDuo OrganizationDuo { get; set; }

        /// <summary>
        /// Presence indicates the user has stored this device as bypassing 2fa
        /// </summary>
        [JsonPropertyName("remember")]
        public FluffyRemember Remember { get; set; }

        /// <summary>
        /// WebAuthn-backed 2fa
        /// </summary>
        [JsonPropertyName("webAuthn")]
        public FluffyWebAuthn WebAuthn { get; set; }

        /// <summary>
        /// Yubikey-backed 2fa
        /// </summary>
        [JsonPropertyName("yubiKey")]
        public FluffyYubiKey YubiKey { get; set; }
    }

    public partial class FluffyAuthenticator
    {
    }

    public partial class FluffyDuo
    {
        [JsonPropertyName("host")]
        public string Host { get; set; }

        [JsonPropertyName("signature")]
        public string Signature { get; set; }
    }

    public partial class FluffyEmail
    {
        /// <summary>
        /// The email to request a 2fa TOTP for
        /// </summary>
        [JsonPropertyName("email")]
        public string Email { get; set; }
    }

    public partial class FluffyRemember
    {
    }

    public partial class FluffyWebAuthn
    {
    }

    public partial class FluffyYubiKey
    {
        /// <summary>
        /// Whether the stored yubikey supports near field communication
        /// </summary>
        [JsonPropertyName("nfc")]
        public bool Nfc { get; set; }
    }

    public partial class ResponseForProjectResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public ProjectResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class ProjectResponse
    {
        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }
    }

    public partial class ResponseForProjectsDeleteResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public ProjectsDeleteResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class ProjectsDeleteResponse
    {
        [JsonPropertyName("data")]
        public ProjectDeleteResponse[] Data { get; set; }
    }

    public partial class ProjectDeleteResponse
    {
        [JsonPropertyName("error")]
        public string Error { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    public partial class ResponseForProjectsResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public ProjectsResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class ProjectsResponse
    {
        [JsonPropertyName("data")]
        public DatumElement[] Data { get; set; }
    }

    public partial class DatumElement
    {
        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }
    }

    public partial class ResponseForSecretIdentifiersResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public SecretIdentifiersResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class SecretIdentifiersResponse
    {
        [JsonPropertyName("data")]
        public SecretIdentifierResponse[] Data { get; set; }
    }

    public partial class SecretIdentifierResponse
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }
    }

    public partial class ResponseForSecretResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public SecretResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class SecretResponse
    {
        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("note")]
        public string Note { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("projectId")]
        public Guid? ProjectId { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class ResponseForSecretsDeleteResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public SecretsDeleteResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class SecretsDeleteResponse
    {
        [JsonPropertyName("data")]
        public SecretDeleteResponse[] Data { get; set; }
    }

    public partial class SecretDeleteResponse
    {
        [JsonPropertyName("error")]
        public string Error { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    public partial class ResponseForSecretsResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public SecretsResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class SecretsResponse
    {
        [JsonPropertyName("data")]
        public DatumClass[] Data { get; set; }
    }

    public partial class DatumClass
    {
        [JsonPropertyName("creationDate")]
        public DateTimeOffset CreationDate { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("key")]
        public string Key { get; set; }

        [JsonPropertyName("note")]
        public string Note { get; set; }

        [JsonPropertyName("organizationId")]
        public Guid OrganizationId { get; set; }

        [JsonPropertyName("projectId")]
        public Guid? ProjectId { get; set; }

        [JsonPropertyName("revisionDate")]
        public DateTimeOffset RevisionDate { get; set; }

        [JsonPropertyName("value")]
        public string Value { get; set; }
    }

    public partial class ResponseForSyncResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public SyncResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class SyncResponse
    {
        /// <summary>
        /// List of ciphers accesible by the user
        /// </summary>
        [JsonPropertyName("ciphers")]
        public CipherDetailsResponse[] Ciphers { get; set; }

        /// <summary>
        /// Data about the user, including their encryption keys and the organizations they are a
        /// part of
        /// </summary>
        [JsonPropertyName("profile")]
        public ProfileResponse Profile { get; set; }
    }

    public partial class CipherDetailsResponse
    {
    }

    /// <summary>
    /// Data about the user, including their encryption keys and the organizations they are a
    /// part of
    /// </summary>
    public partial class ProfileResponse
    {
        [JsonPropertyName("email")]
        public string Email { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("organizations")]
        public ProfileOrganizationResponse[] Organizations { get; set; }
    }

    public partial class ProfileOrganizationResponse
    {
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    public partial class ResponseForUserApiKeyResponse
    {
        /// <summary>
        /// The response data. Populated if `success` is true.
        /// </summary>
        [JsonPropertyName("data")]
        public UserApiKeyResponse Data { get; set; }

        /// <summary>
        /// A message for any error that may occur. Populated if `success` is false.
        /// </summary>
        [JsonPropertyName("errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Whether or not the SDK request succeeded.
        /// </summary>
        [JsonPropertyName("success")]
        public bool Success { get; set; }
    }

    public partial class UserApiKeyResponse
    {
        /// <summary>
        /// The user's API key, which represents the client_secret portion of an oauth request.
        /// </summary>
        [JsonPropertyName("apiKey")]
        public string ApiKey { get; set; }
    }

    /// <summary>
    /// Device type to send to Bitwarden. Defaults to SDK
    /// </summary>
    public enum DeviceType { Android, AndroidAmazon, ChromeBrowser, ChromeExtension, EdgeBrowser, EdgeExtension, FirefoxBrowser, FirefoxExtension, IOs, IeBrowser, LinuxDesktop, MacOsDesktop, OperaBrowser, OperaExtension, SafariBrowser, SafariExtension, Sdk, UnknownBrowser, Uwp, VivaldiBrowser, VivaldiExtension, WindowsDesktop };

    /// <summary>
    /// Two-factor provider
    /// </summary>
    public enum TwoFactorProvider { Authenticator, Duo, Email, OrganizationDuo, Remember, U2F, WebAuthn, Yubikey };

    public enum LinkedIdType { Address1, Address2, Address3, Brand, CardholderName, City, Code, Company, Country, Email, ExpMonth, ExpYear, FirstName, FullName, LastName, LicenseNumber, MiddleName, Number, PassportNumber, Password, Phone, PostalCode, Ssn, State, Title, Username };

    public enum FieldType { Boolean, Hidden, Linked, Text };

    public enum UriMatchType { Domain, Exact, Host, Never, RegularExpression, StartsWith };

    public enum CipherRepromptType { None, Password };

    public enum SecureNoteType { Generic };

    public enum CipherType { Card, Identity, Login, SecureNote };

    public enum ExportFormatEnum { AccountEncryptedJson, Csv, Json };

    public enum SendType { File, Text };

    public partial struct ExportFormat
    {
        public ExportFormatEnum? Enum;
        public ExportFormatClass ExportFormatClass;

        public static implicit operator ExportFormat(ExportFormatEnum Enum) => new ExportFormat { Enum = Enum };
        public static implicit operator ExportFormat(ExportFormatClass ExportFormatClass) => new ExportFormat { ExportFormatClass = ExportFormatClass };
    }

    public partial class ClientSettings
    {
        public static ClientSettings FromJson(string json) => JsonSerializer.Deserialize<ClientSettings>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class Command
    {
        public static Command FromJson(string json) => JsonSerializer.Deserialize<Command>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class DocRef
    {
        public static DocRef FromJson(string json) => JsonSerializer.Deserialize<DocRef>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForApiKeyLoginResponse
    {
        public static ResponseForApiKeyLoginResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForApiKeyLoginResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForFingerprintResponse
    {
        public static ResponseForFingerprintResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForFingerprintResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForPasswordLoginResponse
    {
        public static ResponseForPasswordLoginResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForPasswordLoginResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForProjectResponse
    {
        public static ResponseForProjectResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForProjectResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForProjectsDeleteResponse
    {
        public static ResponseForProjectsDeleteResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForProjectsDeleteResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForProjectsResponse
    {
        public static ResponseForProjectsResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForProjectsResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForSecretIdentifiersResponse
    {
        public static ResponseForSecretIdentifiersResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForSecretIdentifiersResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForSecretResponse
    {
        public static ResponseForSecretResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForSecretResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForSecretsDeleteResponse
    {
        public static ResponseForSecretsDeleteResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForSecretsDeleteResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForSecretsResponse
    {
        public static ResponseForSecretsResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForSecretsResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForSyncResponse
    {
        public static ResponseForSyncResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForSyncResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public partial class ResponseForUserApiKeyResponse
    {
        public static ResponseForUserApiKeyResponse FromJson(string json) => JsonSerializer.Deserialize<ResponseForUserApiKeyResponse>(json, Bitwarden.Sdk.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ClientSettings self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this Command self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this DocRef self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForApiKeyLoginResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForFingerprintResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForPasswordLoginResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForProjectResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForProjectsDeleteResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForProjectsResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForSecretIdentifiersResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForSecretResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForSecretsDeleteResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForSecretsResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForSyncResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
        public static string ToJson(this ResponseForUserApiKeyResponse self) => JsonSerializer.Serialize(self, Bitwarden.Sdk.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                DeviceTypeConverter.Singleton,
                TwoFactorProviderConverter.Singleton,
                LinkedIdTypeConverter.Singleton,
                FieldTypeConverter.Singleton,
                UriMatchTypeConverter.Singleton,
                CipherRepromptTypeConverter.Singleton,
                SecureNoteTypeConverter.Singleton,
                CipherTypeConverter.Singleton,
                ExportFormatConverter.Singleton,
                ExportFormatEnumConverter.Singleton,
                SendTypeConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class DeviceTypeConverter : JsonConverter<DeviceType>
    {
        public override bool CanConvert(Type t) => t == typeof(DeviceType);

        public override DeviceType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Android":
                    return DeviceType.Android;
                case "AndroidAmazon":
                    return DeviceType.AndroidAmazon;
                case "ChromeBrowser":
                    return DeviceType.ChromeBrowser;
                case "ChromeExtension":
                    return DeviceType.ChromeExtension;
                case "EdgeBrowser":
                    return DeviceType.EdgeBrowser;
                case "EdgeExtension":
                    return DeviceType.EdgeExtension;
                case "FirefoxBrowser":
                    return DeviceType.FirefoxBrowser;
                case "FirefoxExtension":
                    return DeviceType.FirefoxExtension;
                case "IEBrowser":
                    return DeviceType.IeBrowser;
                case "LinuxDesktop":
                    return DeviceType.LinuxDesktop;
                case "MacOsDesktop":
                    return DeviceType.MacOsDesktop;
                case "OperaBrowser":
                    return DeviceType.OperaBrowser;
                case "OperaExtension":
                    return DeviceType.OperaExtension;
                case "SDK":
                    return DeviceType.Sdk;
                case "SafariBrowser":
                    return DeviceType.SafariBrowser;
                case "SafariExtension":
                    return DeviceType.SafariExtension;
                case "UWP":
                    return DeviceType.Uwp;
                case "UnknownBrowser":
                    return DeviceType.UnknownBrowser;
                case "VivaldiBrowser":
                    return DeviceType.VivaldiBrowser;
                case "VivaldiExtension":
                    return DeviceType.VivaldiExtension;
                case "WindowsDesktop":
                    return DeviceType.WindowsDesktop;
                case "iOS":
                    return DeviceType.IOs;
            }
            throw new Exception("Cannot unmarshal type DeviceType");
        }

        public override void Write(Utf8JsonWriter writer, DeviceType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case DeviceType.Android:
                    JsonSerializer.Serialize(writer, "Android", options);
                    return;
                case DeviceType.AndroidAmazon:
                    JsonSerializer.Serialize(writer, "AndroidAmazon", options);
                    return;
                case DeviceType.ChromeBrowser:
                    JsonSerializer.Serialize(writer, "ChromeBrowser", options);
                    return;
                case DeviceType.ChromeExtension:
                    JsonSerializer.Serialize(writer, "ChromeExtension", options);
                    return;
                case DeviceType.EdgeBrowser:
                    JsonSerializer.Serialize(writer, "EdgeBrowser", options);
                    return;
                case DeviceType.EdgeExtension:
                    JsonSerializer.Serialize(writer, "EdgeExtension", options);
                    return;
                case DeviceType.FirefoxBrowser:
                    JsonSerializer.Serialize(writer, "FirefoxBrowser", options);
                    return;
                case DeviceType.FirefoxExtension:
                    JsonSerializer.Serialize(writer, "FirefoxExtension", options);
                    return;
                case DeviceType.IeBrowser:
                    JsonSerializer.Serialize(writer, "IEBrowser", options);
                    return;
                case DeviceType.LinuxDesktop:
                    JsonSerializer.Serialize(writer, "LinuxDesktop", options);
                    return;
                case DeviceType.MacOsDesktop:
                    JsonSerializer.Serialize(writer, "MacOsDesktop", options);
                    return;
                case DeviceType.OperaBrowser:
                    JsonSerializer.Serialize(writer, "OperaBrowser", options);
                    return;
                case DeviceType.OperaExtension:
                    JsonSerializer.Serialize(writer, "OperaExtension", options);
                    return;
                case DeviceType.Sdk:
                    JsonSerializer.Serialize(writer, "SDK", options);
                    return;
                case DeviceType.SafariBrowser:
                    JsonSerializer.Serialize(writer, "SafariBrowser", options);
                    return;
                case DeviceType.SafariExtension:
                    JsonSerializer.Serialize(writer, "SafariExtension", options);
                    return;
                case DeviceType.Uwp:
                    JsonSerializer.Serialize(writer, "UWP", options);
                    return;
                case DeviceType.UnknownBrowser:
                    JsonSerializer.Serialize(writer, "UnknownBrowser", options);
                    return;
                case DeviceType.VivaldiBrowser:
                    JsonSerializer.Serialize(writer, "VivaldiBrowser", options);
                    return;
                case DeviceType.VivaldiExtension:
                    JsonSerializer.Serialize(writer, "VivaldiExtension", options);
                    return;
                case DeviceType.WindowsDesktop:
                    JsonSerializer.Serialize(writer, "WindowsDesktop", options);
                    return;
                case DeviceType.IOs:
                    JsonSerializer.Serialize(writer, "iOS", options);
                    return;
            }
            throw new Exception("Cannot marshal type DeviceType");
        }

        public static readonly DeviceTypeConverter Singleton = new DeviceTypeConverter();
    }

    internal class TwoFactorProviderConverter : JsonConverter<TwoFactorProvider>
    {
        public override bool CanConvert(Type t) => t == typeof(TwoFactorProvider);

        public override TwoFactorProvider Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Authenticator":
                    return TwoFactorProvider.Authenticator;
                case "Duo":
                    return TwoFactorProvider.Duo;
                case "Email":
                    return TwoFactorProvider.Email;
                case "OrganizationDuo":
                    return TwoFactorProvider.OrganizationDuo;
                case "Remember":
                    return TwoFactorProvider.Remember;
                case "U2f":
                    return TwoFactorProvider.U2F;
                case "WebAuthn":
                    return TwoFactorProvider.WebAuthn;
                case "Yubikey":
                    return TwoFactorProvider.Yubikey;
            }
            throw new Exception("Cannot unmarshal type TwoFactorProvider");
        }

        public override void Write(Utf8JsonWriter writer, TwoFactorProvider value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case TwoFactorProvider.Authenticator:
                    JsonSerializer.Serialize(writer, "Authenticator", options);
                    return;
                case TwoFactorProvider.Duo:
                    JsonSerializer.Serialize(writer, "Duo", options);
                    return;
                case TwoFactorProvider.Email:
                    JsonSerializer.Serialize(writer, "Email", options);
                    return;
                case TwoFactorProvider.OrganizationDuo:
                    JsonSerializer.Serialize(writer, "OrganizationDuo", options);
                    return;
                case TwoFactorProvider.Remember:
                    JsonSerializer.Serialize(writer, "Remember", options);
                    return;
                case TwoFactorProvider.U2F:
                    JsonSerializer.Serialize(writer, "U2f", options);
                    return;
                case TwoFactorProvider.WebAuthn:
                    JsonSerializer.Serialize(writer, "WebAuthn", options);
                    return;
                case TwoFactorProvider.Yubikey:
                    JsonSerializer.Serialize(writer, "Yubikey", options);
                    return;
            }
            throw new Exception("Cannot marshal type TwoFactorProvider");
        }

        public static readonly TwoFactorProviderConverter Singleton = new TwoFactorProviderConverter();
    }

    internal class LinkedIdTypeConverter : JsonConverter<LinkedIdType>
    {
        public override bool CanConvert(Type t) => t == typeof(LinkedIdType);

        public override LinkedIdType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Address1":
                    return LinkedIdType.Address1;
                case "Address2":
                    return LinkedIdType.Address2;
                case "Address3":
                    return LinkedIdType.Address3;
                case "Brand":
                    return LinkedIdType.Brand;
                case "CardholderName":
                    return LinkedIdType.CardholderName;
                case "City":
                    return LinkedIdType.City;
                case "Code":
                    return LinkedIdType.Code;
                case "Company":
                    return LinkedIdType.Company;
                case "Country":
                    return LinkedIdType.Country;
                case "Email":
                    return LinkedIdType.Email;
                case "ExpMonth":
                    return LinkedIdType.ExpMonth;
                case "ExpYear":
                    return LinkedIdType.ExpYear;
                case "FirstName":
                    return LinkedIdType.FirstName;
                case "FullName":
                    return LinkedIdType.FullName;
                case "LastName":
                    return LinkedIdType.LastName;
                case "LicenseNumber":
                    return LinkedIdType.LicenseNumber;
                case "MiddleName":
                    return LinkedIdType.MiddleName;
                case "Number":
                    return LinkedIdType.Number;
                case "PassportNumber":
                    return LinkedIdType.PassportNumber;
                case "Password":
                    return LinkedIdType.Password;
                case "Phone":
                    return LinkedIdType.Phone;
                case "PostalCode":
                    return LinkedIdType.PostalCode;
                case "Ssn":
                    return LinkedIdType.Ssn;
                case "State":
                    return LinkedIdType.State;
                case "Title":
                    return LinkedIdType.Title;
                case "Username":
                    return LinkedIdType.Username;
            }
            throw new Exception("Cannot unmarshal type LinkedIdType");
        }

        public override void Write(Utf8JsonWriter writer, LinkedIdType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case LinkedIdType.Address1:
                    JsonSerializer.Serialize(writer, "Address1", options);
                    return;
                case LinkedIdType.Address2:
                    JsonSerializer.Serialize(writer, "Address2", options);
                    return;
                case LinkedIdType.Address3:
                    JsonSerializer.Serialize(writer, "Address3", options);
                    return;
                case LinkedIdType.Brand:
                    JsonSerializer.Serialize(writer, "Brand", options);
                    return;
                case LinkedIdType.CardholderName:
                    JsonSerializer.Serialize(writer, "CardholderName", options);
                    return;
                case LinkedIdType.City:
                    JsonSerializer.Serialize(writer, "City", options);
                    return;
                case LinkedIdType.Code:
                    JsonSerializer.Serialize(writer, "Code", options);
                    return;
                case LinkedIdType.Company:
                    JsonSerializer.Serialize(writer, "Company", options);
                    return;
                case LinkedIdType.Country:
                    JsonSerializer.Serialize(writer, "Country", options);
                    return;
                case LinkedIdType.Email:
                    JsonSerializer.Serialize(writer, "Email", options);
                    return;
                case LinkedIdType.ExpMonth:
                    JsonSerializer.Serialize(writer, "ExpMonth", options);
                    return;
                case LinkedIdType.ExpYear:
                    JsonSerializer.Serialize(writer, "ExpYear", options);
                    return;
                case LinkedIdType.FirstName:
                    JsonSerializer.Serialize(writer, "FirstName", options);
                    return;
                case LinkedIdType.FullName:
                    JsonSerializer.Serialize(writer, "FullName", options);
                    return;
                case LinkedIdType.LastName:
                    JsonSerializer.Serialize(writer, "LastName", options);
                    return;
                case LinkedIdType.LicenseNumber:
                    JsonSerializer.Serialize(writer, "LicenseNumber", options);
                    return;
                case LinkedIdType.MiddleName:
                    JsonSerializer.Serialize(writer, "MiddleName", options);
                    return;
                case LinkedIdType.Number:
                    JsonSerializer.Serialize(writer, "Number", options);
                    return;
                case LinkedIdType.PassportNumber:
                    JsonSerializer.Serialize(writer, "PassportNumber", options);
                    return;
                case LinkedIdType.Password:
                    JsonSerializer.Serialize(writer, "Password", options);
                    return;
                case LinkedIdType.Phone:
                    JsonSerializer.Serialize(writer, "Phone", options);
                    return;
                case LinkedIdType.PostalCode:
                    JsonSerializer.Serialize(writer, "PostalCode", options);
                    return;
                case LinkedIdType.Ssn:
                    JsonSerializer.Serialize(writer, "Ssn", options);
                    return;
                case LinkedIdType.State:
                    JsonSerializer.Serialize(writer, "State", options);
                    return;
                case LinkedIdType.Title:
                    JsonSerializer.Serialize(writer, "Title", options);
                    return;
                case LinkedIdType.Username:
                    JsonSerializer.Serialize(writer, "Username", options);
                    return;
            }
            throw new Exception("Cannot marshal type LinkedIdType");
        }

        public static readonly LinkedIdTypeConverter Singleton = new LinkedIdTypeConverter();
    }

    internal class FieldTypeConverter : JsonConverter<FieldType>
    {
        public override bool CanConvert(Type t) => t == typeof(FieldType);

        public override FieldType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Boolean":
                    return FieldType.Boolean;
                case "Hidden":
                    return FieldType.Hidden;
                case "Linked":
                    return FieldType.Linked;
                case "Text":
                    return FieldType.Text;
            }
            throw new Exception("Cannot unmarshal type FieldType");
        }

        public override void Write(Utf8JsonWriter writer, FieldType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case FieldType.Boolean:
                    JsonSerializer.Serialize(writer, "Boolean", options);
                    return;
                case FieldType.Hidden:
                    JsonSerializer.Serialize(writer, "Hidden", options);
                    return;
                case FieldType.Linked:
                    JsonSerializer.Serialize(writer, "Linked", options);
                    return;
                case FieldType.Text:
                    JsonSerializer.Serialize(writer, "Text", options);
                    return;
            }
            throw new Exception("Cannot marshal type FieldType");
        }

        public static readonly FieldTypeConverter Singleton = new FieldTypeConverter();
    }

    internal class UriMatchTypeConverter : JsonConverter<UriMatchType>
    {
        public override bool CanConvert(Type t) => t == typeof(UriMatchType);

        public override UriMatchType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "domain":
                    return UriMatchType.Domain;
                case "exact":
                    return UriMatchType.Exact;
                case "host":
                    return UriMatchType.Host;
                case "never":
                    return UriMatchType.Never;
                case "regularExpression":
                    return UriMatchType.RegularExpression;
                case "startsWith":
                    return UriMatchType.StartsWith;
            }
            throw new Exception("Cannot unmarshal type UriMatchType");
        }

        public override void Write(Utf8JsonWriter writer, UriMatchType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case UriMatchType.Domain:
                    JsonSerializer.Serialize(writer, "domain", options);
                    return;
                case UriMatchType.Exact:
                    JsonSerializer.Serialize(writer, "exact", options);
                    return;
                case UriMatchType.Host:
                    JsonSerializer.Serialize(writer, "host", options);
                    return;
                case UriMatchType.Never:
                    JsonSerializer.Serialize(writer, "never", options);
                    return;
                case UriMatchType.RegularExpression:
                    JsonSerializer.Serialize(writer, "regularExpression", options);
                    return;
                case UriMatchType.StartsWith:
                    JsonSerializer.Serialize(writer, "startsWith", options);
                    return;
            }
            throw new Exception("Cannot marshal type UriMatchType");
        }

        public static readonly UriMatchTypeConverter Singleton = new UriMatchTypeConverter();
    }

    internal class CipherRepromptTypeConverter : JsonConverter<CipherRepromptType>
    {
        public override bool CanConvert(Type t) => t == typeof(CipherRepromptType);

        public override CipherRepromptType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "None":
                    return CipherRepromptType.None;
                case "Password":
                    return CipherRepromptType.Password;
            }
            throw new Exception("Cannot unmarshal type CipherRepromptType");
        }

        public override void Write(Utf8JsonWriter writer, CipherRepromptType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case CipherRepromptType.None:
                    JsonSerializer.Serialize(writer, "None", options);
                    return;
                case CipherRepromptType.Password:
                    JsonSerializer.Serialize(writer, "Password", options);
                    return;
            }
            throw new Exception("Cannot marshal type CipherRepromptType");
        }

        public static readonly CipherRepromptTypeConverter Singleton = new CipherRepromptTypeConverter();
    }

    internal class SecureNoteTypeConverter : JsonConverter<SecureNoteType>
    {
        public override bool CanConvert(Type t) => t == typeof(SecureNoteType);

        public override SecureNoteType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            if (value == "Generic")
            {
                return SecureNoteType.Generic;
            }
            throw new Exception("Cannot unmarshal type SecureNoteType");
        }

        public override void Write(Utf8JsonWriter writer, SecureNoteType value, JsonSerializerOptions options)
        {
            if (value == SecureNoteType.Generic)
            {
                JsonSerializer.Serialize(writer, "Generic", options);
                return;
            }
            throw new Exception("Cannot marshal type SecureNoteType");
        }

        public static readonly SecureNoteTypeConverter Singleton = new SecureNoteTypeConverter();
    }

    internal class CipherTypeConverter : JsonConverter<CipherType>
    {
        public override bool CanConvert(Type t) => t == typeof(CipherType);

        public override CipherType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Card":
                    return CipherType.Card;
                case "Identity":
                    return CipherType.Identity;
                case "Login":
                    return CipherType.Login;
                case "SecureNote":
                    return CipherType.SecureNote;
            }
            throw new Exception("Cannot unmarshal type CipherType");
        }

        public override void Write(Utf8JsonWriter writer, CipherType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case CipherType.Card:
                    JsonSerializer.Serialize(writer, "Card", options);
                    return;
                case CipherType.Identity:
                    JsonSerializer.Serialize(writer, "Identity", options);
                    return;
                case CipherType.Login:
                    JsonSerializer.Serialize(writer, "Login", options);
                    return;
                case CipherType.SecureNote:
                    JsonSerializer.Serialize(writer, "SecureNote", options);
                    return;
            }
            throw new Exception("Cannot marshal type CipherType");
        }

        public static readonly CipherTypeConverter Singleton = new CipherTypeConverter();
    }

    internal class ExportFormatConverter : JsonConverter<ExportFormat>
    {
        public override bool CanConvert(Type t) => t == typeof(ExportFormat);

        public override ExportFormat Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            switch (reader.TokenType)
            {
                case JsonTokenType.String:
                    var stringValue = reader.GetString();
                    switch (stringValue)
                    {
                        case "AccountEncryptedJson":
                            return new ExportFormat { Enum = ExportFormatEnum.AccountEncryptedJson };
                        case "Csv":
                            return new ExportFormat { Enum = ExportFormatEnum.Csv };
                        case "Json":
                            return new ExportFormat { Enum = ExportFormatEnum.Json };
                    }
                    break;
                case JsonTokenType.StartObject:
                    var objectValue = JsonSerializer.Deserialize<ExportFormatClass>(ref reader, options);
                    return new ExportFormat { ExportFormatClass = objectValue };
            }
            throw new Exception("Cannot unmarshal type ExportFormat");
        }

        public override void Write(Utf8JsonWriter writer, ExportFormat value, JsonSerializerOptions options)
        {
            if (value.Enum != null)
            {
                switch (value.Enum)
                {
                    case ExportFormatEnum.AccountEncryptedJson:
                        JsonSerializer.Serialize(writer, "AccountEncryptedJson", options);
                        return;
                    case ExportFormatEnum.Csv:
                        JsonSerializer.Serialize(writer, "Csv", options);
                        return;
                    case ExportFormatEnum.Json:
                        JsonSerializer.Serialize(writer, "Json", options);
                        return;
                }
            }
            if (value.ExportFormatClass != null)
            {
                JsonSerializer.Serialize(writer, value.ExportFormatClass, options);
                return;
            }
            throw new Exception("Cannot marshal type ExportFormat");
        }

        public static readonly ExportFormatConverter Singleton = new ExportFormatConverter();
    }

    internal class ExportFormatEnumConverter : JsonConverter<ExportFormatEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(ExportFormatEnum);

        public override ExportFormatEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "AccountEncryptedJson":
                    return ExportFormatEnum.AccountEncryptedJson;
                case "Csv":
                    return ExportFormatEnum.Csv;
                case "Json":
                    return ExportFormatEnum.Json;
            }
            throw new Exception("Cannot unmarshal type ExportFormatEnum");
        }

        public override void Write(Utf8JsonWriter writer, ExportFormatEnum value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case ExportFormatEnum.AccountEncryptedJson:
                    JsonSerializer.Serialize(writer, "AccountEncryptedJson", options);
                    return;
                case ExportFormatEnum.Csv:
                    JsonSerializer.Serialize(writer, "Csv", options);
                    return;
                case ExportFormatEnum.Json:
                    JsonSerializer.Serialize(writer, "Json", options);
                    return;
            }
            throw new Exception("Cannot marshal type ExportFormatEnum");
        }

        public static readonly ExportFormatEnumConverter Singleton = new ExportFormatEnumConverter();
    }

    internal class SendTypeConverter : JsonConverter<SendType>
    {
        public override bool CanConvert(Type t) => t == typeof(SendType);

        public override SendType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "File":
                    return SendType.File;
                case "Text":
                    return SendType.Text;
            }
            throw new Exception("Cannot unmarshal type SendType");
        }

        public override void Write(Utf8JsonWriter writer, SendType value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case SendType.File:
                    JsonSerializer.Serialize(writer, "File", options);
                    return;
                case SendType.Text:
                    JsonSerializer.Serialize(writer, "Text", options);
                    return;
            }
            throw new Exception("Cannot marshal type SendType");
        }

        public static readonly SendTypeConverter Singleton = new SendTypeConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
            this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
            => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
            get => _dateTimeStyles;
            set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
            get => _dateTimeFormat ?? string.Empty;
            set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
            get => _culture ?? CultureInfo.CurrentCulture;
            set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
            string text;


            if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
            {
                value = value.ToUniversalTime();
            }

            text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

            writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? dateText = reader.GetString();

            if (string.IsNullOrEmpty(dateText) == false)
            {
                if (!string.IsNullOrEmpty(_dateTimeFormat))
                {
                    return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                }
                else
                {
                    return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                }
            }
            else
            {
                return default(DateTimeOffset);
            }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603

