[package]
name = "bitwarden"
version = "0.3.1"
authors = ["Bitwarden Inc"]
license-file = "LICENSE"
repository = "https://github.com/bitwarden/sdk"
homepage = "https://bitwarden.com"
description = """
Bitwarden Secrets Manager SDK
"""
keywords = ["bitwarden", "secrets-manager"]
edition = "2021"
rust-version = "1.57"

[features]
default = ["secrets"]

secrets = []                    # Secrets manager API
internal = []                   # Internal testing methods
mobile = ["uniffi", "internal"] # Mobile-specific features

[dependencies]
aes = ">=0.8.2, <0.9"
argon2 = { version = ">=0.5.0, <0.6", features = [
    "alloc",
], default-features = false }
assert_matches = ">=1.5.0, <2.0"
base64 = ">=0.21.2, <0.22"
bitwarden-api-api = { path = "../bitwarden-api-api", version = "=0.2.2" }
bitwarden-api-identity = { path = "../bitwarden-api-identity", version = "=0.2.2" }
cbc = { version = ">=0.1.2, <0.2", features = ["alloc"] }
chrono = { version = ">=0.4.26, <0.5", features = [
    "serde",
    "std",
], default-features = false }
# We don't use this directly (it's used by rand), but we need it here to enable WASM support
getrandom = { version = ">=0.2.9, <0.3", features = ["js"] }
hkdf = ">=0.12.3, <0.13"
hmac = ">=0.12.1, <0.13"
lazy_static = ">=1.4.0, <2.0"
log = ">=0.4.18, <0.5"
num-bigint = ">=0.4, <0.5"
num-traits = ">=0.2.15, <0.3"
pbkdf2 = { version = ">=0.12.1, <0.13", default-features = false }
rand = ">=0.8.5, <0.9"
reqwest = { version = ">=0.11, <0.12", features = [
    "json",
], default-features = false }
rsa = ">=0.9.2, <0.10"
schemars = { version = ">=0.8, <0.9", features = ["uuid1", "chrono"] }
serde = { version = ">=1.0, <2.0", features = ["derive"] }
serde_json = ">=1.0.96, <2.0"
serde_qs = ">=0.12.0, <0.13"
serde_repr = ">=0.1.12, <0.2"
sha1 = ">=0.10.5, <0.11"
sha2 = ">=0.10.6, <0.11"
subtle = ">=2.5.0, <3.0"
thiserror = ">=1.0.40, <2.0"
uniffi = { version = "=0.25.2", optional = true }
uuid = { version = ">=1.3.3, <2.0", features = ["serde"] }

[target.'cfg(not(windows))'.dependencies]
# On non-windows platforms, we use rustls as the TLS stack, and for the moment we include webpki-roots to provide a default set of root certificates
# Ultimately we want to use the system root certificates, but native-roots doesn't support mobile platforms yet, and rustls-platform-verifier is very new
# and still going through some major changes.
reqwest = { version = "*", features = [
    "rustls-tls-webpki-roots",
], default-features = false }

[target.'cfg(windows)'.dependencies]
# In the case of windows, we force the use of the native Windows TLS stack (scchannel) which helps with some cross-compilation issues
# This should use Windows APIs for certificate validation and so it would support user-installed certs
reqwest = { version = "*", features = ["native-tls"], default-features = false }

[dev-dependencies]
rand_chacha = "0.3.1"
tokio = { version = "1.34.0", features = ["rt", "macros"] }
wiremock = "0.5.21"
