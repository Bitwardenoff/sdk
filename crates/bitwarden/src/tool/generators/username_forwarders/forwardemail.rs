use base64::Engine;
use reqwest::{header::CONTENT_TYPE, StatusCode};

use crate::{
    error::{Error, Result},
    util::BASE64_ENGINE,
};

pub async fn generate(
    http: &reqwest::Client,
    api_token: String,
    domain: String,
    website: Option<String>,
) -> Result<String> {
    generate_with_api_url(
        http,
        api_token,
        domain,
        website,
        "https://api.forwardemail.net".into(),
    )
    .await
}

async fn generate_with_api_url(
    http: &reqwest::Client,
    api_token: String,
    domain: String,
    website: Option<String>,
    api_url: String,
) -> Result<String> {
    let api_token_b64 = BASE64_ENGINE.encode(format!("{api_token}:").as_bytes());

    let description = super::format_description(&website);

    #[derive(serde::Serialize)]
    struct Request {
        labels: Option<String>,
        description: String,
    }

    let response = http
        .post(format!("{api_url}/v1/domains/{domain}/aliases"))
        .header(CONTENT_TYPE, "application/json")
        .bearer_auth(api_token_b64)
        .json(&Request {
            description,
            labels: website,
        })
        .send()
        .await?;

    if response.status() == StatusCode::UNAUTHORIZED {
        return Err("Invalid Forward Email API key.".into());
    }

    // Throw any other errors
    response.error_for_status_ref()?;

    #[derive(serde::Deserialize)]
    struct ResponseDomain {
        name: Option<String>,
    }
    #[derive(serde::Deserialize)]
    struct Response {
        name: String,
        domain: ResponseDomain,

        message: Option<String>,
        error: Option<String>,
    }
    let status = response.status();
    let response: Response = response.json().await?;

    if let Some(message) = response.message {
        return Err(Error::ResponseContent { status, message });
    }
    if let Some(message) = response.error {
        return Err(Error::ResponseContent { status, message });
    }

    Ok(format!(
        "{}@{}",
        response.name,
        response.domain.name.unwrap_or(domain)
    ))
}

#[cfg(test)]
mod tests {
    use serde_json::json;
    #[tokio::test]
    async fn test_mock_server() {
        use wiremock::{matchers, Mock, ResponseTemplate};

        let (server, _client) = crate::util::start_mock(vec![
            // Mock the request to the ForwardEmail API, and verify that the correct request is made
            Mock::given(matchers::path("/v1/domains/mydomain.com/aliases"))
                .and(matchers::method("POST"))
                .and(matchers::header("Content-Type", "application/json"))
                .and(matchers::header("Authorization", "Bearer TVlfVE9LRU46"))
                .and(matchers::body_json(json!({
                    "labels": "example.com",
                    "description": "Website: example.com. Generated by Bitwarden."
                })))
                .respond_with(ResponseTemplate::new(201).set_body_json(json!({
                    "name": "wertg8ad",
                    "domain": {
                        "name": "mydomain.com"
                    }
                })))
                .expect(1),
        ])
        .await;

        let address = super::generate_with_api_url(
            &reqwest::Client::new(),
            "MY_TOKEN".into(),
            "mydomain.com".into(),
            Some("example.com".into()),
            format!("http://{}", server.address()),
        )
        .await
        .unwrap();

        server.verify().await;
        assert_eq!(address, "wertg8ad@mydomain.com");
    }
}
