use reqwest::{header::CONTENT_TYPE, StatusCode};

use crate::error::{Error, Result};
pub async fn generate(api_key: String, website: Option<String>) -> Result<String> {
    if api_key.is_empty() {
        return Err(Error::Internal("Invalid SimpleLogin API key."));
    }

    let query = website
        .as_ref()
        .map(|w| format!("?hostname={}", w))
        .unwrap_or_default();

    let note = website
        .as_ref()
        .map(|w| format!("Website: {w}. "))
        .unwrap_or_default();
    let note = format!("{note}Generated by Bitwarden.");

    #[derive(serde::Serialize)]
    struct Request {
        note: String,
    }

    let response = reqwest::Client::new()
        .post(format!(
            "https://app.simplelogin.io/api/alias/random/new{query}"
        ))
        .header(CONTENT_TYPE, "application/json")
        .bearer_auth(api_key)
        .json(&Request { note })
        .send()
        .await?;

    if response.status() == StatusCode::UNAUTHORIZED {
        return Err(Error::Internal("Invalid SimpleLogin API key."));
    }

    // Throw any other errors
    response.error_for_status_ref()?;

    #[derive(serde::Deserialize)]
    struct Response {
        alias: String,
    }
    let response: Response = response.json().await?;

    Ok(response.alias)
}
