use reqwest::{
    header::{self},
    StatusCode,
};

use crate::error::{Error, Result};
pub async fn generate(api_token: String, website: Option<String>) -> Result<String> {
    if api_token.is_empty() {
        return Err(Error::Internal("Invalid Firefox Relay API API key"));
    }

    #[derive(serde::Serialize)]
    struct Request {
        enabled: bool,
        generated_for: Option<String>,
        description: String,
    }

    let description = website
        .as_ref()
        .map(|w| format!("{w} - "))
        .unwrap_or_default();
    let description = format!("{description}Generated by Bitwarden.");

    let response = reqwest::Client::new()
        .post("https://relay.firefox.com/api/v1/relayaddresses/")
        .header(header::AUTHORIZATION, format!("Token {api_token}"))
        .json(&Request {
            enabled: true,
            generated_for: website,
            description,
        })
        .send()
        .await?;

    if response.status() == StatusCode::UNAUTHORIZED {
        return Err(Error::Internal("Invalid Firefox Relay API API key"));
    }

    // Throw any other errors
    response.error_for_status_ref()?;

    #[derive(serde::Deserialize)]
    struct Response {
        full_address: String,
    }
    let response: Response = response.json().await?;

    Ok(response.full_address)
}
